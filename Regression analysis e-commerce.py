# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j8p6ABWR9IkVr8wzCvS1leqjSKjrYIqT
"""

pip install linearmodels

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import sklearn as sk
import scipy as sp
from statsmodels.compat import lzip
from statsmodels.stats.outliers_influence import variance_inflation_factor
from linearmodels.panel import PooledOLS
from linearmodels.panel import BetweenOLS
from linearmodels.panel import RandomEffects
from linearmodels.panel import PanelOLS
from linearmodels.panel import FirstDifferenceOLS
from linearmodels.panel import compare

ecom = pd.read_excel('ecom16-21.xlsx')

elog = pd.read_excel('elogaf.xlsx')

"Логорифмирование всех переменных"
ecom['ln_eshare']=ecom['eshare'].apply(np.log)
ecom['ln_citypop']=ecom['citypop'].apply(np.log)
ecom['ln_youthpop']=ecom['youthpop'].apply(np.log)
ecom['ln_poorpop']=ecom['poorpop'].apply(np.log)
ecom['ln_incomepop']=ecom['incomepop'].apply(np.log)
ecom['ln_pop']=ecom['pop'].apply(np.log)
ecom['ln_students']=ecom['students'].apply(np.log)
ecom['ln_grp']=ecom['grp'].apply(np.log)
ecom['ln_entrepreneur']=ecom['entrepreneur'].apply(np.log)
ecom['ln_investment']=ecom['investment'].apply(np.log)
ecom['ln_cpi']=ecom['cpi'].apply(np.log)
ecom['ln_card']=ecom['card'].apply(np.log)
ecom['ln_internetorg']=ecom['internetorg'].apply(np.log)
ecom['ln_internetpop']=ecom['internetpop'].apply(np.log)
ecom['ln_sctec']=ecom['sctec'].apply(np.log)
ecom['ln_citydig']=ecom['citydig'].apply(np.log)
ecom['ln_condig']=ecom['condig'].apply(np.log)
ecom['ln_roads']=ecom['roads'].apply(np.log)
ecom['ln_cargo']=ecom['cargo'].apply(np.log)

year = pd.Categorical(ecom.year)
ecom = ecom.set_index(["cod","year"])
ecom

yearl = pd.Categorical(elog.year)
elog = elog.set_index(["cod","year"])
elog

elog2 = pd.read_excel('elogaf2.xlsx')

yearl2 = pd.Categorical(elog2.year)
elog2 = elog2.set_index(["cod","year"])
elog2

"""'eshare' 'citypop','youthpop','poorpop','incomepop','students','covid','grp','entrepreneur','investment','cpi', 'card','internetorg','internetpop','sctec','citydig','condig','roads','cargo'"""



'ln_citypop','ln_youthpop','ln_incomepop','ln_students','covid','ln_investment','ln_cpi','ln_internetorg','ln_internetpop','ln_sctec','ln_citydig','ln_roads'

# определяем зависимую переменную и набор независимых переменных
x = elog2[['ln_citypop','ln_youthpop','ln_incomepop','ln_students','covid','ln_investment','ln_cpi','ln_internetorg','ln_internetpop','ln_sctec','ln_citydig','ln_roads']]
y = elog2['ln_eshare'].tolist()
 
# добавляем константу
x = sm.add_constant(x)
 
# Оцениваем модель регрессии использую МНК
result = sm.OLS(y, x).fit()
 
# Вывод таблицы с результатами оценки уравнения регрессии
print(result.summary())

vif = pd.DataFrame()
vif["feature"] = x.columns
vif["VIF"] = [variance_inflation_factor(x.values, i)
                          for i in range(len(x.columns))]
print(vif)

#Влиятельные наблюдения
fig = sm.graphics.influence_plot(result, criterion="cooks")
fig.tight_layout(pad=1.0)
plt.axhline(y=2, color='r', linestyle='-')
plt.axhline(y=-2, color='r', linestyle='-')
plt.show()
fig = sm.graphics.plot_leverage_resid2(result)
fig.tight_layout(pad=1.0)
plt.show()

pred_val = result.fittedvalues.copy()
true_val = elog2['ln_eshare'].values.copy()
residual = true_val - pred_val
fig, ax = plt.subplots(figsize=(6,2.5))
plt.axhline(y=0, color='g', linestyle='--')
ax.scatter(pred_val, residual)

#Тест Бреуша-Пагана
labels_bp = ['X square statistic', 'p-value',
        'f-value', 'f p-value']
test_bp = sm.stats.diagnostic.het_breuschpagan(result.resid, result.model.exog)

from statsmodels.compat import lzip
lzip(labels_bp, test_bp)

labels_g = ['Goldfeld Quandt statistic', 'p-value']
test_g = sm.stats.diagnostic.het_goldfeldquandt(result.resid, result.model.exog)

lzip(labels_g, test_g)

fig = plt.figure(figsize=(15, 30))
sm.graphics.plot_partregress_grid(result, fig=fig)
plt.show()

fig = plt.figure(figsize=(15, 30))
sm.graphics.plot_ccpr_grid(result, fig=fig)
plt.show()

#Тесты на спецификацию
label_rainbow = ["Rainbow test statistic", "p - value"]
test_rainbow = sm.stats.diagnostic.linear_rainbow(result)
lzip(label_rainbow, test_rainbow)

label_reset = ["Wald ", "p - value"]
test_reset = sm.stats.diagnostic.linear_reset(result, power=5, test_type = "fitted")
test_reset

#Нормальность распределения
import scipy as sp
fig, ax = plt.subplots(figsize=(6,2.5))
sp.stats.probplot(residual, plot=ax, fit=True)

sns.histplot(residual,kde=True, stat="percent")

#Автокорреляция
test_dw = sm.stats.stattools.durbin_watson(result.resid, axis=0)
test_dw

x = elog2[['ln_citypop','ln_youthpop','covid','ln_entrepreneur','ln_investment','cpi','ln_internetorg','ln_internetpop','ln_sctec','ln_citydig','ln_condig','ln_roads']]
y = elog2['ln_eshare'].tolist()
 
# добавляем константу
x = sm.add_constant(x)
 
# Оцениваем модель регрессии используя МНК
model_OLS = PooledOLS(elog2.ln_eshare, x)
result_OLS = model_OLS.fit()
# Вывод таблицы с результатами оценки уравнения регрессии
print(result_OLS)

model_RE = RandomEffects(elog2.ln_eshare, x)
result_RE = model_RE.fit()
print(result_RE)

#фиксированные эффекты, рассчитанные с использованием within transformation
model_FE_i = PanelOLS(elog2.ln_eshare, x, entity_effects=True)
result_FE_i = model_FE_i.fit()
print(result_FE_i)

model_FE_it = PanelOLS(elog2.ln_eshare, x, entity_effects=True, time_effects=True, drop_absorbed=True)
result_FE_it = model_FE_it.fit()
print(result_FE_it)

print(compare({"Pooled": result_OLS, "RE": result_RE, 
               "FE (panel)": result_FE_i, "FE (panel+time)": result_FE_it}, 
              precision='std_errors', stars=True))

